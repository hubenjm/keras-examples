import numpy as np
import csv
import progressbar

"""
Taken from http://archive.ics.uci.edu/ml/datasets/Poker+Hand
Format is:

1) S1 "Suit of card #1" 
Ordinal (1-4) representing {Hearts, Spades, Diamonds, Clubs} 

2) C1 "Rank of card #1" 
Numerical (1-13) representing (Ace, 2, 3, ... , Queen, King) 

3) S2 "Suit of card #2" 
Ordinal (1-4) representing {Hearts, Spades, Diamonds, Clubs} 

4) C2 "Rank of card #2" 
Numerical (1-13) representing (Ace, 2, 3, ... , Queen, King) 

5) S3 "Suit of card #3" 
Ordinal (1-4) representing {Hearts, Spades, Diamonds, Clubs} 

6) C3 "Rank of card #3" 
Numerical (1-13) representing (Ace, 2, 3, ... , Queen, King) 

7) S4 "Suit of card #4" 
Ordinal (1-4) representing {Hearts, Spades, Diamonds, Clubs} 

8) C4 "Rank of card #4" 
Numerical (1-13) representing (Ace, 2, 3, ... , Queen, King) 

9) S5 "Suit of card #5" 
Ordinal (1-4) representing {Hearts, Spades, Diamonds, Clubs} 

10) C5 "Rank of card 5" 
Numerical (1-13) representing (Ace, 2, 3, ... , Queen, King) 

11) CLASS "Poker Hand" 
Ordinal (0-9) 

0: Nothing in hand; not a recognized poker hand 
1: One pair; one pair of equal ranks within five cards 
2: Two pairs; two pairs of equal ranks within five cards 
3: Three of a kind; three equal ranks within five cards 
4: Straight; five cards, sequentially ranked with no gaps 
5: Flush; five cards with the same suit 
6: Full house; pair + different rank three of a kind 
7: Four of a kind; four equal ranks within five cards 
8: Straight flush; straight + flush 
9: Royal flush; {Ace, King, Queen, Jack, Ten} + flush 
"""

def readdata(filename):

	with open(filename,'r') as f:
		data_iter = csv.reader(f, delimiter = ',', quotechar = '"')
		data = [row for row in data_iter]
		data_array = np.asarray(data, dtype = np.int)   

	return data_array
	
def bruteforce_classifier_test():
	testfilename = 'poker-hand-testing.data'
	from pokerhandid import idhand, besthand
	Z = readdata(testfilename)
	X = Z[:,:-1]
	y = Z[:,-1]
	N = X.shape[0]
	print N
	
	accuracy = 0
	for j in xrange(N):
		accuracy += (besthand(idhand(X[j,:])) == y[j])
		progressbar.printProgress(j+1, N, prefix = "pokerclassify.bruteforce_classifier_test: iteration {}".format(j+1), barLength = 40)
	
	accuracy = accuracy*1./float(N)
	return accuracy
	

def keras_nn_train():
	from keras.models import Sequential, Model
	from keras.layers import Embedding, Permute, Input, Dense, Dropout, Activation, Flatten, Reshape, merge
	from keras.utils import np_utils
	from keras import backend as K

	# parameters
	batch_size = 128 #number of examples per gradient descent step
	nb_classes = 10 #number of possible hand labels
	nb_epoch = 12 #number of learning epochs

	# input data dimensions
	ns_cols = 5
	nr_cols = 5
	n_cols = ns_cols + nr_cols

	s_indices = [0,2,4,6,8]
	r_indices = [1,3,5,7,9]
	#permutation = [0,2,4,6,8,1,3,5,7,9]

	# size of pooling area for max pooling
	# pool_size = 2

	#data filenames
	trainingfilename = 'poker-hand-training.data'
	testfilename = 'poker-hand-testing.data'

	#read data
	Z_train = readdata(trainingfilename)
	#X_train = Z_train[:, permutation] - 1
	X_train_suits = Z_train[:, s_indices] - 1
	X_train_ranks = Z_train[:, r_indices] - 1
	y_train = Z_train[:,-1]
	N = Z_train.shape[0]
	print N

	Z_test = readdata(testfilename)
	#X_test = Z_test[:, permutation] - 1
	X_test_suits = Z_test[:, s_indices] - 1
	X_test_ranks = Z_test[:, r_indices] - 1
	y_test = Z_test[:,-1]

	X_train_suits = X_train_suits.reshape(X_train_suits.shape[0], ns_cols, 1)
	X_train_ranks = X_train_ranks.reshape(X_train_ranks.shape[0], nr_cols, 1)
	X_test_suits = X_test_suits.reshape(X_test_suits.shape[0], ns_cols, 1)
	X_test_ranks = X_test_ranks.reshape(X_test_ranks.shape[0], nr_cols, 1)

	input_shape = (n_cols, 1)

	# convert class vectors to binary class matrices
	Y_train = np_utils.to_categorical(y_train, nb_classes)
	Y_test = np_utils.to_categorical(y_test, nb_classes)

	####

	#add code here to sample from data to proportionally choose from each hand type

	####
#l1 = Input(batch_shape=(None,), dtype='int32', name='l1')
#l2 = Input(batch_shape=(None,), dtype='int32', name='l2')
#l3 = Input(batch_shape=(None,), dtype='int32', name='l3')

#e1 = Embedding(output_dim=60, input_dim=1000, input_length=1)(l1)
#e2 = Embedding(output_dim=60, input_dim=1000, input_length=1)(l2)
#e3 = Embedding(output_dim=60, input_dim=20, input_length=1)(l3)

#merged = merge([e1,e2,e3], mode='concat', concat_axis=1)
#flatten = Reshape((180,)) (merged)
#activation = Dense(60, activation='tanh')(flatten)


	
	suits = Input(shape=(5,1), dtype='int32', name = 'suits') #integer suit values to be embedded (4 values)
	ranks = Input(shape=(5,1), dtype='int32', name = 'ranks') #integer card ranks to be embedded (13 values)
	em1 = Embedding(output_dim=7, input_dim=4, input_length=5)(suits) #4 classes for suits feature
	em2 = Embedding(output_dim=7, input_dim=13, input_length=5)(ranks)
	T = merge([em1, em2], mode='concat', concat_axis = 1)
	print T.get_shape()
	T = Reshape((70,))(T)
	print T.get_shape()
	T = Dense(128, activation = 'relu')(T)
	T = Dense(128, activation = 'relu')(T)
	T = Dropout(0.25)(T)
	main_output = Dense(nb_classes, activation = 'softmax')(T)
	model = Model(input=[suits, ranks], output=[main_output])
	model.compile(loss='categorical_crossentropy', optimizer='adadelta', metrics=['accuracy'])
	model.fit([X_train_suits, X_train_ranks], Y_train, batch_size=batch_size, nb_epoch=nb_epoch,
		verbose=1, validation_data=([X_test_suits, X_test_ranks], Y_test))
	
if __name__ == "__main__":
	keras_nn_train()
	#print bruteforce_classifier_test()
